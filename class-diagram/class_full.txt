@startuml
abstract class ITEM as "Item" {
# id: int
# label: String
# category: String
}

note bottom of ITEM
Item is separate from
LineItem because of the
IDs. There can be several
LineItems pertaining to
cookies bought in different
amounts, but there should
be only one cookie Item.
end note

class ITEM_U as "UnitPricedItem" {
- pricePerUnit: double
- kgPerUnit: double
}
ITEM <|-- ITEM_U

class ITEM_W as "WeightPricedItem" {
- pricePerKg: double
}
ITEM <|-- ITEM_W



interface LINE_ITEM as "LineItem" {
+ {abstract} accept(pv: PriceVisitor): double
+ {abstract} accept(wv: WeightVisitor): double
+ {abstract} getItemLabel(): String
+ {abstract} getItemCategory(): String
}

note top of LINE_ITEM
- Visitable.
- Information expert
on subtotal price
and weight.
Cf GRASP slides 37+
end note

class LINE_ITEM_U as "UnitPricedLineItem" {
- item: UnitPricedItem
- quantity: int
+ accept(pv: PriceVisitor): double
+ accept(wv: WeightVisitor): double
}
LINE_ITEM <|-- LINE_ITEM_U
LINE_ITEM_U --> "1" ITEM_U

class LINE_ITEM_W as "WeightPricedLineItem" {
- item: WeightPricedItem
- weight: double
+ accept(pv: PriceVisitor): double
+ accept(wv: WeightVisitor): double
}
LINE_ITEM <|-- LINE_ITEM_W
LINE_ITEM_W --> "1" ITEM_W



interface VISITOR_PRICE as "PriceVisitor" {
+ {abstract} visit(uli: UnitPricedLineItem): double
+ {abstract} visit(wli: WeightPricedLineItem): double
}

class VISITOR_PRICE_C as "ConcretePriceVisitor" {
+ visit(uli: UnitPricedLineItem): double
+ visit(wli: WeightPricedLineItem): double
}
VISITOR_PRICE <|-- VISITOR_PRICE_C

interface VISITOR_WEIGHT as "WeightVisitor" {
+ {abstract} visit(uli: UnitPricedLineItem): double
+ {abstract} visit(wli: WeightPricedLineItem): double
}

class VISITOR_WEIGHT_C as "ConcreteWeightVisitor" {
+ visit(uli: UnitPricedLineItem): double
+ visit(wli: WeightPricedLineItem): double
}
VISITOR_WEIGHT <|-- VISITOR_WEIGHT_C



abstract class POLICY as "PricingPolicy" {
- category: String
+ {abstract} applyDiscount(price: double): double
}

note left of POLICY
R6, R6b:
Strategy pattern
for policies.
Cf Patters slides 20+
end note

class FV_POLICY as "FreshVeggiesPolicy" {
+ applyDiscount(price: double): double
}
POLICY <|-- FV_POLICY

class D_POLICY as "DairyPolicy" {
+ applyDiscount(price: double): double
}
POLICY <|-- D_POLICY



class CUSTOMERDATA as "CustomerData" {
- id: int
- firstName: String
- surname: String
- plan: CustomerPlan
- addr: Address
}

note left of CUSTOMERDATA
Dependency injection
for plan and address
for loose coupling.
Cf GRASP Slides 24-26
end note

abstract class PLAN as "CustomerPlan" {
+ {abstract} applyCartDiscount(total: double): double
+ {abstract} applyDeliveryDiscount(fee: double): double
+ {abstract} getAnnualFee(): double
}
CUSTOMERDATA --> "1" PLAN

note left of PLAN
R5, R5b, R8b:
- Strategy pattern
- Information expert
on final cart discount.
end note

class PLAN_STANDARD as "StandardPlan" {
+ applyCartDiscount(total: double): double
+ applyDeliveryDiscount(fee: double): double
+ getAnnualFee(): double
}
PLAN <|-- PLAN_STANDARD

class PLAN_PRIME as "PrimePlan" {
+ applyCartDiscount(total: double): double
+ applyDeliveryDiscount(fee: double): double
+ getAnnualFee(): double
}
PLAN <|-- PLAN_PRIME

class PLAN_PLAT as "PlatinumPlan" {
+ applyCartDiscount(total: double): double
+ applyDeliveryDiscount(fee: double): double
+ getAnnualFee(): double
}
PLAN <|-- PLAN_PLAT

class ADDRESS as "Address" {
- x: double
- y: double
}
CUSTOMERDATA --> "1" ADDRESS

interface DIST as "Distance" {
+ {abstract} distanceBetween(addr1: Address, addr2: Address): double
}
DIST --> ADDRESS

class EUCLID as "EuclideanDistance" {
+ distanceBetween(addr1: Address, addr2: Address): double
}
DIST <|-- EUCLID

class MANHATTAN as "ManhattanDistance" {
+ distanceBetween(addr1: Address, addr2: Address): double
}
DIST <|-- MANHATTAN



class SUPERMARKET as "SupermarketData" {
- addr: Address
- distComputer: Distance
- plans: List<CustomerPlan>
- policies: List<PricingPolicy>
- customers: List<CustomerData>
+ addPolicy(policy: PricingPolicy): void
+ addCustomerData(firstName: String, surname: String, plan: CustomerPlan, addr: Address): void
+ distanceTo(addr: Address): double
+ findPolicy(category: String): PricingPolicy
+ findCustomerData(customerDataId: int): CustomerData
}
SUPERMARKET --> "1" ADDRESS
SUPERMARKET --> "1" DIST
SUPERMARKET --> "1..*" PLAN
SUPERMARKET --> "1..*" POLICY
SUPERMARKET --> "0..*" CUSTOMERDATA

note top of SUPERMARKET
SupermarketData is a database
of sorts and aggregates 
policies and customer data.
--> Creator pattern: it is
responsible for creating
CustomerData instances.
Cf GRASP Slide 32
end note



class REGISTER as "CashRegister" {
- priceVisitor: PriceVisitor
- weightVisitor: WeightVisitor
- supermarketData: SupermarketData
+ scanCart(cart: List<LineItem>): double
}
REGISTER --> LINE_ITEM
REGISTER --> "1" VISITOR_PRICE
REGISTER --> "1" VISITOR_WEIGHT
REGISTER --> "1" SUPERMARKET

note top of REGISTER
- Visitor pattern to compute
the price of the line items
since they can be priced
differently.
Cf Patterns slides 35+
- scanCart reads the contents
of the cart and displays the
labels and prices as instructed
in the requirements.
It returns the cart's price.
end note



class CARD as "Card" {
- accountId: int
- number: String
- pin: int
}

note bottom of CARD
Card simply aggregates data,
which means the high coupling
here isn't too bad.
An interface here wouldn't
add anything.
end note

class POS as "POS" {
- insertedCard: Card
- tas: TAS
+ insertCard(card: Card): void
+ checkCard(card: Card): boolean
+ checkPIN(pin: int): boolean
+ askAuthorization(): boolean
+ startTransaction(amount: double): boolean
+ ejectCard(): void
}
POS --> "1" CARD

note left of POS
We wanted to separate the handling
of the card with a separate
CardController class, but it
turned out that the POS had
no responsability left.
end note

class BANK as "Bank" {
- accounts: List<Account>
+ addCreditAccount(balance: double, maxDebt: double): void
+ addDebitAccount(balance: double): void
+ findAccount(accountId: int): Account
+ checkTransactionValidity(accountId: int, amount: double): boolean
+ performTransaction(accountId: int, amount: double): void
}

note left of BANK
Creator pattern: Bank
aggregates accounts and
therefore must create them.
end note

class TAS as "TAS" {
- bank: Bank
+ openSecureConnection(): boolean
+ closeSecureConnection(): void
+ startTransaction(accountId: int, amount: double): boolean
}
POS --> "1" TAS
TAS --> "1" BANK

abstract class ACCOUNT as "Account" {
# id: int
# balance: double
+ createNewCard(): Card
+ {abstract} checkTransactionValidity(amount: double): boolean
+ {abstract} takeMoney(amount: double): void
}
BANK --> "1..*" ACCOUNT

class ACCOUNT_C as "CreditAccount" {
- maxDebt: double
- currentDebt: double
+ checkTransactionValidity(amount: double): boolean
+ takeMoney(amount: double): void
}
ACCOUNT <|-- ACCOUNT_C

class ACCOUNT_D as "DebitAccount" {
+ checkTransactionValidity(amount: double): boolean
+ takeMoney(amount: double): void
}
ACCOUNT <|-- ACCOUNT_D

class CUSTOMER as "Customer" {
- card: Card
- customerDataId: int
+ insertCard(pos: POS): void
+ typePIN(pos: POS, pin: int): boolean
}
CUSTOMER --> "1" CARD
CUSTOMER --> POS



class CONTROLLER as "SCSController" {
- supermarketData: SupermarketData
- cashRegister: CashRegister
- bank: Bank
- tas: TAS
- pos: POS
- customers: List<Customer>
- items: List<Item>
- plans: List<CustomerPlan>
+ addCreditAccount(balance: double, maxDebt: double): void
+ void addDebitAccount(balance: double): void
+ addUnitPricedItem(label: String, category: String, pricePerUnit: double, kgPerUnit: double): void
+ addWeightPricedItem(label: String, category: String, pricePerKg: double): void
+ addCustomer(card: Card, customerDataId: int): void
+ getCustomer(index: int): Customer
+ getCustomerPlan(index: int): CustomerPlan
+ getAccount(index: int): Account
}
CONTROLLER --> "1" REGISTER
CONTROLLER --> "1" SUPERMARKET
CONTROLLER --> "1" POS
CONTROLLER --> "1" TAS
CONTROLLER --> "1" BANK
CONTROLLER --> "0..*" CUSTOMER
CONTROLLER --> "0..*" ITEM
CONTROLLER --> "1..*" PLAN
CONTROLLER --> ACCOUNT

@enduml