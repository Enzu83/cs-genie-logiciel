@startuml

class CARD as "Card" {
- number: int
- pin: int
- accountId: int
}

note bottom of CARD
Card simply aggregates data,
which means the high coupling
here isn't too bad.
An interface here wouldn't
add anything.
end note

class POS as "POS" {
- insertedCard: Card
+ insertCard(card: Card): void
+ checkCard(card: Card): boolean
+ checkPIN(pin: int): boolean
+ startTransaction(amount: double): boolean
+ ejectCard(): void
}
POS --> "1" CARD

note left of POS
We wanted to separate the handling
of the card with a separate
CardController class, but it
turned out that the POS had
no responsability left.
end note

class BANK as "Bank" {
+ checkTransactionValidity(accountId: int, amount: double): boolean
}

class TAS as "TAS" {
- bank: Bank
+ openSecureConnection(): boolean
+ startTransaction(accountId: int, amount: double): boolean
}
POS --> "1" TAS
TAS --> "1" BANK

abstract class ACCOUNT as "Account" {
- id: int
- balance: double
+ {abstract} check(amount: double): boolean
}
BANK --> "1..*" ACCOUNT

class ACCOUNT_C as "CreditAccount" {
- maxDebt: double
- currentDebt: double
+ check(amount: double): boolean
}
ACCOUNT <|-- ACCOUNT_C

class ACCOUNT_D as "DebitAccount" {
+ check(amount: double): boolean
}
ACCOUNT <|-- ACCOUNT_D

class CUSTOMER as "Customer" {
- card: Card
+ insertCard(pos: POS): void
+ typePIN(pos: POS, pin: int): void
}
CUSTOMER --> "1" CARD
CUSTOMER --> POS

@enduml